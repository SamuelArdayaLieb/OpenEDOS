/**
 * @note This file was autogenerated with OpenEDOS v2.2.
 * Sections inside USER CODE BEGIN and USER CODE END will be left untouched 
 * when rerunning the code generation. Happy coding!
 * 
 * @file dummy_0_intf.h
 * @author Samuel Ardaya-Lieb
 */

/* USER CODE COPYRIGHT NOTICE BEGIN */
/**
 * OpenEDOS, (c) 2022-2025 Samuel Ardaya-Lieb, MIT License
 * 
 * https://github.com/SamuelArdayaLieb/OpenEDOS
 */
/* USER CODE COPYRIGHT NOTICE END */

/* USER CODE FILE INTRODUCTION BEGIN */
/* USER CODE FILE INTRODUCTION END */

#ifndef DUMMY_0_INTF_H
#define DUMMY_0_INTF_H

#include "oe_defines.h"

/* Includes, defines, typedefs, etc. */
/* USER CODE INTERFACE HEADER BEGIN */
/* USER CODE INTERFACE HEADER END */

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Requests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

/**
 * @brief Send a message to request: Dummy_0_Req.
 * 
 * Send one byte 'param' to Dummy 0.
 * Response: Yes
 * 
 * @param param 
 * @param ResponseHandler A pointer to the function
 * that will handle the response to this request.
 * @param KernelID The ID of the kernel to which
 * the requesting module belongs.
 * @return OE_Error_t An error is returned if
 * - processing the message results in an error.
 * Otherwise OE_ERROR_NONE is returned.
 */
OE_Error_t req_Dummy_0_Req(
	uint8_t param,
	OE_MessageHandler_t ResponseHandler,
	OE_KernelID_t KernelID);

struct requestArgs_Dummy_0_Req_s {
	uint8_t param;
};

/**
 * @brief Send a response to the request: Dummy_0_Req.
 * 
 * Return the received byte 'param'.
 * 
 * @param param 
 * @param RequestHeader A pointer to the header of
 * the request message to which this response is sent.
 * @return OE_Error_t An error is returned if
 * - processing the message results in an error.
 * Otherwise OE_ERROR_NONE is returned.
 */
OE_Error_t res_Dummy_0_Req(
	uint8_t param,
	OE_MessageHeader_t* RequestHeader);

struct responseArgs_Dummy_0_Req_s {
	uint8_t param;
};

#endif // DUMMY_0_INTF_H